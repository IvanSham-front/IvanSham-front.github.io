{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","postDateToServe","exam","subject","num","count","contentForSend","Object","keys","length","alert","Number","questions","push","n","fetch","method","headers","body","JSON","stringify","then","responce","json","data","console","log","catch","error","name","massage","genereteAndSendVariant","theme","max","questionFilter","filter","item","questions_count","Math","floor","random","themes","map","p","i","id","state","isLoaded","content","exams","subjects","numbers","all_questions_count","window","onload","setState","title","sub","nums","newContent","this","className","index","href","onClick","ev","preventDefault","undefined","find","prevState","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e05f4764.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/loading.css';\nimport './styles/normalize.css';\nimport './styles/styles.css';\n\n//На первый взгляд код кажется громоздким, но я все подробно расписал.\n// В реальном приложении нужно будет все разбивать на компоненты и использовать Redux\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n\n    //Начальное состояние\n    this.state = {\n      data: [], //будут данные с сервера\n      isLoaded: false, //Состояние для страницы загрузки, пока не подгрузилась информация с сервера\n      content: { //сюда их разделим для рендеринга на страницу\n        exams:[],\n        subjects: [],\n        numbers: [],\n        themes: [],\n      },  \n      exam: {}, //тут будут данные, которые потом отправим на сервер\n      subject: {},\n      num: [],\n      all_questions_count: []\n    }\n\n    const token = 'Token 7ecb81f446fb4decf08d59d8616d828d45822e02';\n    const urlForGetAllInfo = 'https://stagging.adaptaki.ru/api/tags/tree/';\n\n    window.onload = () => {\n      fetch(urlForGetAllInfo, {\n        headers: {\n          'Authorization': token\n        }\n      })\n      .then(responce => responce.json())\n      .then((data) => {\n        this.setState({\n          data\n        })\n        //получаем данные с сервера и раскладываем, с помощью циклов в state.content для удобного рендеринга на страницу\n        const exams = this.state.data.exams\n        const content = this.state.content\n        for (let exam in exams) {\n            content.exams.push({\n              title: exams[exam].title,\n              id: exam\n            })\n            for (let subject in exams[exam].subjects) {\n                let sub = exams[exam].subjects[subject]\n                  content.subjects.push({\n                    title: sub.title,\n                    id: subject\n                  })\n                  for (let num in sub.nums) {\n                    let n = sub.nums[num]\n                    content.numbers.push({\n                      num,\n                      all_questions_count: n.all_questions_count\n                    })\n                    for (let theme in n.themes) {\n                      content.themes.push(n.themes[theme]);\n                      const newContent = { ...this.state.content };\n                      newContent.themes[theme].questions_count = 0;\n                      this.setState({ content: newContent });\n                    }\n                  }\n             }\n        }\n        this.setState({\n          isLoaded: true\n        })  \n      })\n      .catch((error) => {\n        console.error(error.name + ' ОШИБКА ' + error.massage)\n      });\n    }\n  }\n\n  postDateToServe = (exam, subject, num, count) => {\n    //фунцкция для отправки, форматирования данных в json и отправки на сервер\n    const contentForSend = {};\n    if (Object.keys(exam).length === 0 || Object.keys(subject).length === 0) {\n      alert('Выберите экзамен и предмет')\n    } else {\n      //создаем объект для отправки \n      contentForSend.exam = Number(exam);\n      contentForSend.subject = Number(subject);\n      if (num.length === 0) {\n        contentForSend.questions = [];\n        contentForSend.questions.push({\n          num: Number(num),\n          count: Number(count)\n        }) \n      } else if (num.length > 1) {\n        contentForSend.questions= [];\n        for (let n in num) {\n          contentForSend.questions.push({\n            num: Number(num[n]),\n            count: Number(count[n])\n          }) \n\n        }\n      }\n      const urlFoSend = 'https://stagging.adaptaki.ru/api/utrs/'\n      const token = 'Token 7ecb81f446fb4decf08d59d8616d828d45822e02'\n      fetch(urlFoSend , {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n          'Authorization': token\n        },\n        body: JSON.stringify(contentForSend)\n      })\n      .then(responce => responce.json())\n      .then((data) => {\n        console.log(data)\n      })\n      .catch((error) => {\n        console.error(error.name + ' ОШИБКА ' + error.massage)\n      });\n    }\n  }\n\n  genereteAndSendVariant = (theme) => {\n    //функция для генерации варианта, форматирования в json и отправки на сервер\n    const contentForSend = {};\n    contentForSend.exam = 7; //тут будет id экзамена и предмета в переменных\n    contentForSend.subject = 5; //в этот раз смысла в этом нет. \n    contentForSend.questions = []\n    const questionFilter = theme.filter(item => item.questions_count > 0);\n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max));\n    }\n    contentForSend.questions.push({\n      num: getRandomInt(20), //вариант сделал рандомный \n      themes: []\n    });\n    questionFilter.map((p, i) => {//отфильтровываем темы с пустыми count\n      contentForSend.questions[0].themes.push({\n        id: questionFilter[i].id,\n        count: questionFilter[i].questions_count\n      })\n    })\n    const urlFoSend = 'https://stagging.adaptaki.ru/api/utrs/'\n    const token = 'Token 7ecb81f446fb4decf08d59d8616d828d45822e02'\n    fetch(urlFoSend , {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'Authorization': token\n      },\n      body: JSON.stringify(contentForSend)\n    })\n    .then(responce => responce.json())\n    .then((data) => {\n      console.log(data)\n    })\n    .catch((error) => {\n      console.error(error.name + ' ОШИБКА ' + error.massage)\n    });\n  }\n\n  render() {\n    const {isLoaded, content} = this.state\n    if (!isLoaded) {\n      return ( //Страница загрузки\n        <div id=\"floatingBarsG\">\n          <div className=\"blockG\" id=\"rotateG_01\"></div>\n          <div className=\"blockG\" id=\"rotateG_02\"></div>\n          <div className=\"blockG\" id=\"rotateG_03\"></div>\n          <div className=\"blockG\" id=\"rotateG_04\"></div>\n          <div className=\"blockG\" id=\"rotateG_05\"></div>\n          <div className=\"blockG\" id=\"rotateG_06\"></div>\n          <div className=\"blockG\" id=\"rotateG_07\"></div>\n          <div className=\"blockG\" id=\"rotateG_08\"></div>\n        </div>\n      )\n    }\n    else {      \n      return (  //основная страница\n        <div className=\"container\">\n          <h1 className=\"title\">Adaptaki</h1>\n\n          <div className=\"block\">\n            <h2 className=\"h2 examens__title\">Выберите экзамен: </h2>\n\n            <ul className=\"list\">\n                \n                {\n                  //Все компоненты, которых может быть несколько, рендерятся в цикле\n                  content.exams.map((props, index) => { \n                    return (\n                      <li key={index} className=\"examens__item\">\n                        <a className=\"examens__link link\" href=\"#\" \n                        onClick={ev => {\n                          ev.preventDefault();\n                          this.setState({\n                            exam: content.exams[index].id\n                          })\n                          }}>\n                          {content.exams[index].title}\n                        </a>\n                      </li>\n                    )\n                  })\n                }\n              </ul>                        \n          </div>\n\n            \n          <div className=\"block\">\n            <h2 className=\"h2\">Выберите предмет:</h2>\n            \n            <ul className=\"list\"> \n                {\n                content.subjects.map((p, index) => {\n                  return (\n                    <li className=\"subjects__item\" key={index}>\n                      <a href=\"#\" className=\"subjects__link link\"\n                      onClick={ev => {\n                        ev.preventDefault();\n                          this.setState({\n                            subject: content.subjects[index].id\n                          })\n                        }}\n                      >{content.subjects[index].title}</a>\n                    </li>\n                  )\n                })\n                }\n            </ul>\n          </div>\n\n          <div className=\"block numbers\">\n            <h2 className=\"h2\">Выберите номер задания</h2>\n\n            <ul className=\"list number__list\">\n              {\n                content.numbers.map((p, index) => {\n                  return (\n                    <li className=\"item\" key={index}>\n                      <a href=\"#\" className=\"link\"\n                      onClick={ev => {\n                        ev.preventDefault()\n                        let checkNum = this.state.num.find(item => item === content.numbers[index].num)\n                        if(checkNum === undefined) {\n                            this.setState(prevState => ({ \n                            num: [...prevState.num, content.numbers[index].num],\n                            all_questions_count: [...prevState.all_questions_count, content.numbers[index].all_questions_count]\n                          }))\n                        }\n                          \n                      }}\n                      >\n                        {content.numbers[index].num}\n                      </a>\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </div>\n\n          <button className=\"btn\"\n          onClick={() => {this.postDateToServe(this.state.exam, this.state.subject, this.state.num, this.state.all_questions_count)}}\n          >Отправить\n          </button>\n\n          <div className=\"block\">\n            <h2 className=\"h2\">Конструктор варианта с заданиями</h2>\n            \n            <ul className=\"themes\">\n            { //Конструктор вариантов сделал отдельно\n              content.themes.map((p, index) => {\n                return (\n                  <li key={index} className=\"themes__item\">\n                    <span className=\"themes__span\">{content.themes[index].title}</span>\n                    \n                    <div className=\"themes__numbers\">\n                      <button className=\"themes__btn\"\n                      onClick={() => {\n                        const newContent = { ...this.state.content };\n                        if (newContent.themes[index].questions_count > 0) {\n                          newContent.themes[index].questions_count--;\n                          this.setState({ content: newContent });\n                        } \n                      }}\n                      >-</button>\n                      <span className=\"link\"\n                      >{content.themes[index].questions_count}\n                      </span>\n                      <button className=\"themes__btn\"\n                      onClick={() => {\n                        const newContent = { ...this.state.content };\n                          newContent.themes[index].questions_count++;\n                          this.setState({ content: newContent });\n                      }}\n                      >+</button>\n                    </div>\n\n                  </li>\n                )\n                \n              })\n             }\n            </ul>\n\n            <button className=\"btn\"\n              onClick={() => this.genereteAndSendVariant(content.themes)}\n            >\n              Сгенерировать свой вариант\n            </button>\n          </div>    \n          \n        </div>\n      )\n    } \n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}